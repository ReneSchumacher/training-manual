#!/usr/bin/env bash
#
# Create initial repo

# shellcheck disable=SC1091
source "$HOME/.trainingmanualrc"

# shellcheck source=script/shared_functions
source ./shared_functions

template_name="caption-this"
org_url="https://$ROOT_URL/$CLASS_ORG"
org_repos_endpoint="https://$INSTANCE_URL/repos/$CLASS_ORG"
template_url="https://github.com/githubtraining/$template_name"

get_initial_repo_name() {
  # Get the repo name
  read -r -p "What would you like to name the repo? " initial_repo_name

  repo_url="$org_url/$initial_repo_name"

  echo "Checking if that repo name is available... [$repo_url]"
  if repo_is_reachable "$repo_url"; then
    echo "A repo with that name already exists. Please choose another name."
    get_initial_repo_name
  else
    echo "Repo name is available!"
  fi
}

create_initial_repo() {
  local repo_name="$initial_repo_name"
  local homepage="https://$CLASS_ORG.github.io/$initial_repo_name/"
  local template_repo_url="$template_url"

  # Create a new empty repo
  gh repo create $CLASS_ORG/$repo_name \
     --description "Let's learn about Git and GitHub" \
     --homepage "$homepage" \
     --disable-wiki \
     --public

  # Create a temporary directory for the template repo
  temp_repo_dir=$(mktemp -d)

  # Delete the temporary directory on script exit
  trap 'rm -rf "$temp_repo_dir"' EXIT

  # Attempt to clone template repo into the temporary directory
  git clone --bare "$template_repo_url" "$temp_repo_dir" >>log.out 2>&1 || {
    print_error "Failed to clone template repository."
    exit 1
  }

  # Switch to the temporary directory and push it on the stack
  pushd "$temp_repo_dir" >>log.out 2>&1 || return

  # Push the template repo to the new empty repo
  git push --mirror "https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/$repo_name" \
    >>log.out 2>&1

  # Switch back to original directory
  popd >>log.out 2>&1 || return

  # Add the token owner as a collaborator
  add_repo_collaborator --repo "$repo_name" --user "$TOKEN_OWNER" --permission "admin"

  # Find the default branch and store its value
  default_branch=$(gh repo view $CLASS_ORG/$repo_name \
                   --json defaultBranchRef | jq .defaultBranchRef.name | sed -e 's/^"//' -e 's/"$//')
}

clone_initial_repo() {
  local initial_repo_url="https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/$initial_repo_name"

  # Create a temporary directory
  temp_initial_repo_dir=$(mktemp -d)

  # Delete the temporary directory on script exit
  trap 'rm -rf "$temp_initial_repo_dir"' EXIT

  # Attempt to clone template repo into the temporary directory
  git clone "$initial_repo_url" "$temp_initial_repo_dir" >>log.out 2>&1 || {
    print_error "Failed to clone template repository."
    exit 1
  }
}

update_readme() {
  # Ask for class dates
  echo "What are the class dates? (e.g. May 4 â€“ 7, 2021)"
  read -r CLASS_DATE
  echo "Who is teaching? (Without the @)"
  read -r TEACHER

  # Get raw contents of README.md and _config.yml
  readme_contents=$(get_repo_file_contents --repo "$initial_repo_name" --path "README.md")
  config_contents=$(get_repo_file_contents --repo "$initial_repo_name" --path "_config.yml")

  # Replace the placeholder text with the actual values
  readme_contents="${readme_contents//THIS-DATE/$CLASS_DATE}"
  readme_contents="${readme_contents//TEACHER-HANDLE/$TEACHER}"
  config_contents="${config_contents//caption-this/$initial_repo_name}"

  # Update README.md and _config.yml in the repo
  update_file_contents --repo "$initial_repo_name" \
    --path "README.md" \
    --content "$readme_contents" \
    --message "Update README.md"

  update_file_contents --repo "$initial_repo_name" \
    --path "_config.yml" \
    --content "$config_contents" \
    --message "Update _config.yml"
}

update_branch_protections() {
  # Update branch protection rules for the default branch
  if http --check-status --ignore-stdin --quiet --auth "$TOKEN_OWNER:$TEACHER_PAT" --raw '{
    "required_status_checks": null,
    "enforce_admins": false,
    "required_pull_request_reviews": {
      "required_approving_review_count": 1
    },
    "restrictions": {
      "users": ["'"$TEACHER"'", "'"$TOKEN_OWNER"'"],
      "teams": []
    }
  }' PUT "$org_repos_endpoint/$initial_repo_name/branches/$default_branch/protection" "Accept:application/vnd.github.luke-cage-preview+json"; then
    echo "Branch protection rules updated."
  else
    print_error "Failed to update branch protection rules."
  fi
}

create_initial_issue() {
  # Navigate to the practice-repos directory
  cd "$(dirname "$0")/../practice-repos" || exit

  # Set $practice_repos_dir to the "physical" path of the working directory
  practice_repos_dir=$(pwd -P)

  # Switch back to the previous directory
  cd - >/dev/null || exit

  # Create the issue
  create_issue --repo "$initial_repo_name" --title "Add collaborators to this repo" \
    --body "$(<"$practice_repos_dir/caption-this/issue_1.md")"
}

create_initial_project() {
  echo -n "Creating project: Caption Contest... "
  # Create project and save the project ID so we can use it to create project columns and cards
  local project=$(gh project create \
                  --owner $CLASS_ORG \
                  --title "Caption Contest" \
                  --format json)
  local project_id=$(echo -n $project | jq -r .id)
  local project_number=$(echo -n $project | jq -r .number)
  gh project edit $project_number --owner $CLASS_ORG -d "Let's see who can create the best captions for our collection of memes."
  echo "Done."

  # Link project to class repository
  echo -n "Linking project to repository... "
  gh project link $project_number --owner $CLASS_ORG --repo $initial_repo_name >> log.out 2>&1
  echo "Done."

  echo -n "Creating Todo item on project... "
  # Get project fields, so we can set the status of our new card
  local project_fields=$(gh project field-list $project_number --owner $CLASS_ORG --format json)
  local status_field_id=$(echo -n $project_fields | jq -r '(.fields[] | select (.name == "Status")).id')
  local todo_status_id=$(echo -n $project_fields | jq -r '(.fields[] | select (.name == "Status")).options[] | select(.name == "Todo").id')

  # Add a note to Todo column
  local item=$(gh project item-create $project_number \
               --owner $CLASS_ORG \
               --title "Each student will update their file in the _slides directory with an image and a caption." \
               --format json)
  local item_id=$(echo -n $item | jq -r .id)
  gh project item-edit --project-id $project_id \
                       --id $item_id \
                       --field-id $status_field_id \
                       --single-select-option-id $todo_status_id
  echo "Done."
}

enable_github_pages() {
  if http --check-status --ignore-stdin --quiet --auth "$TOKEN_OWNER:$TEACHER_PAT" --raw '{
    "source": {
      "branch": "'"$default_branch"'"
    }
  }' POST "$org_repos_endpoint/$initial_repo_name/pages" "Accept:application/vnd.github.switcheroo-preview+json"; then
    echo "GitHub Pages enabled."
  else
    print_error "Failed to enable GitHub Pages."
  fi
}

# Get the repo name
get_initial_repo_name

# Log into GH CLI
echo -n "$TEACHER_PAT" | gh auth login --with-token

# Create the initial repo
create_initial_repo

# Clone initial repo
clone_initial_repo

# Prepare initial repo
update_readme
update_branch_protections
create_initial_issue
create_initial_project
enable_github_pages

print_done "Here's a link to the repo: $repo_url"
print_success "Good luck with class!"